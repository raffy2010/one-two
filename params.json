{
  "name": "One-two",
  "tagline": "A simple web micro framework",
  "body": "# one-two\r\n\r\nA simple web micro framework\r\n\r\nIt's small(4kb min+gzip) but powerful. It help you write much more declarative code,\r\nthrough Component system you can make your code much reusable without pain.\r\nYou can use it with any tech stack, no Node.js environment needed, no server render\r\nneeded, just ship with your html content, parse and compile.\r\n\r\n\r\nHowever, it isn't a full-feature MVVM framework. there's no render feature in it,\r\nyou should handle that by yourself no matter server render or client template.\r\n\r\n\r\n## Installation\r\n```sh\r\n$ npm install one-two --save\r\n```\r\n\r\n## Example\r\n```html\r\n<html>\r\n  <head>\r\n    <title>Onetwo Greet Example</title>\r\n    <script src=\"greet.bundle.js\"></script>\r\n  </head>\r\n  <body>\r\n    <div x-component=\"Greet\">\r\n      word: <input type=\"text\" x-model=\"this.props.word\">\r\n      <p>hello, <span x-html=\"this.props.word\"></span></p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n```js\r\nimport {\r\n  compile,\r\n  parse,\r\n  Component,\r\n  register\r\n} from 'one-two';\r\n\r\nclass Greet extends Component {\r\n  getProps() {\r\n    return {\r\n      word: \"\"\r\n    };\r\n  }\r\n}\r\n\r\nregister('Greet', Greet);\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  compile(parse(document.body));\r\n});\r\n```\r\n\r\n## Attrs\r\nthere are nine builtin attrs to help you to build app. Almost include all features\r\nyou need, Component, DOM Event, interpolation, DOM tree update, DOM style and class update.\r\n### x-component\r\ndeclare a component, the component should be register first via register(string, class) method\r\nthe dom node will be the root node of component, this.node will point to it.\r\n```html\r\n<div x-component=\"Foo\"></div>\r\n```\r\n\r\n### x-html\r\ninsert expression value into dom node, not support interpolation flag(like {{}}) now\r\n```html\r\n<div x-html=\"this.data.text\"></div>\r\n```\r\n\r\n### x-model\r\nlink input value to component property, it's bidirection link\r\n```html\r\n<input x-model=\"this.data.name\" type=\"text\" />\r\n```\r\n\r\n### x-update\r\nthe attr replace the dom child nodes with the content generated by the expression,\r\nafter replacement it will parse the new section and compile if attr was found.\r\n```html\r\n<div x-update=\"this.renderLogs(this.data.logs)\"></div>\r\n```\r\n\r\n### x-append\r\nx-append is like x-update, the only difference is the dom operation, x-append append\r\ncontent to that node, whereas x-update replace it\r\n```html\r\n<div x-append=\"this.data.moreText\"></div>\r\n```\r\n\r\n### x-event\r\nx-event can help you bind dom event handler, $event is the origin dom event inject to\r\nthe expression scope\r\n```html\r\n<div x-click=\"this.clickIt($event)\"></div>\r\n```\r\n\r\n### x-class\r\nx-class help you manipulate dom class, format className:expression[;className:expression]\r\n```html\r\n<div x-class=\"foo:this.data.isFoo\"></div>\r\n```\r\n\r\n### x-style\r\nx-class help you manipulate dom style, format style:expression[;style:expression]\r\n```html\r\n<div x-style=\"fontSize:this.data.fontSize\"></div>\r\n```\r\n\r\n### x-show\r\nx-show help you display dom node conditionally\r\n```html\r\n<div x-show=\"this.data.isOk\"></div>\r\n```\r\n\r\n## License\r\n[MIT](https://tldrlegal.com/license/mit-license)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}